A few more questions:

1. The instructions in the trace did not produce the correct mathematical result because each time the compiler gets a value from memory, lisp.h shifts ELISPOBJECT that is 64 bits two bits to the right to create a Lisp integer of 62 bits. After the right shifting, arith_driver carries the multiplication and stores the product in %rbp. However, the following instruction causes the problem specifically:

54e014  48 8d 04 ad 02 00 00 00 lea 0x2(,%rbp,4),%rax   rax=0x7fffffff73ab3b42

This will then left shift the Lisp_Object to recover it back into an ELISPOBJECT by two bits and changing the value and storing it in %rax. Hence we have an incorrect mathematical result. 


2. The shell command emacs -Q -batch -eval '(print most-negative-fixnum)' outputs -2305843009213693952 because this number comes from the value defined in lisp.h. We find that lisp.h on line 937 MOST_NEGATIVE_FIXNUM is defined as (-1 - MOST_POSITIVE_FIXNUM) and MOST_POSITIVE_FIXNUM is defined as (EMACS_INT_MAX >> INTTYPEBITS). EMACS_INT_MAX is defined to equal INT_MAX(0x7fffffffffffffff), and INTTYPEBITS is set to 2 since integers are 62 bit numbers, so it shifts the value to the right producing (2^61-1). This evaluates MOST_POSITIVE_FIXNUM to equal 2305843009213693951. Then when we compute -1 - 2305843009213693951, it evaluates to the number -2305843009213693952 which is what the shell command will output when asked to print most-negative-fixnum. 


3.emacs -Q -batch -eval '(print (* most-positive-fixnum most-positive-fixnum most-positive-fixnum most-positive-fixnum))' outputs only 1 because when multiplying the most-positive-fixnum by itself, it will produce the number 1100000000000000000000000000000000000000000000000000000000000001 in a 64-bit representation. Because we are fitting in a 64 bit quantity, the most significant two bits will be truncated when Emacs calls the Ftimes function. Since most-positive-fixnum is a Lisp_Object, the product is in the correct object type and returns the value, which is 1. 


4. If the Emacs executable was compiled with GCC's -fwrapv option as well, then we would not need to check for overflow manually, since the compiler automatically assumes undefined behavior and wrap around the result if needed. This will not produce any compilation/runtime errors or problems, however the result could be mathematically incorrect because overflow will occur and there is no practical way of checking. 

