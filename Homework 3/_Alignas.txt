_Alignas.txt

One more thing. C11 allows declarations to have an alignment specifier. For example, 'int _Alignas (8) n;' acts just like 'int n;', except that it arranges for n's alignment to be 8 instead of the default int alignment of 4. Assuming the x86-64, what value does the C expression 'sizeof (struct { char a; char _Alignas (8) b; char c; })' return and why? Briefly explain in a plain ASCII text file _Alignas.txt.

The C expression returns the value 16. The structure can seemingly be packed in 10 bytes (a = 1, b = 8, and c = 1), but we do not satisfy the 4-byte alignment requirement in that case since the addresses of the elements of a structure declaration (say, struct S s[3]) will be x_s, x_s + 10, x_s + 20. So, the compiler will allocate 16 bytes for this structure, with the final 6 bytes being wasted space:

offset 		0 1	9 10	16
contents       |a |  b  |c |//////|

This way, the elements of the array will have address x_s, x_s + 16, x_s + 32, so that x_s is a multiple of 4 and alignment restrictions will be satisfied.     


