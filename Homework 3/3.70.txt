Problem 3.70


Consider the following union declaration: 

union ele {
	struct {
		long *p;
		long y;
	} e1;
	struct {
		long x;
		union ele *next;
	} e2;
}; 

A. What are the offsets (in bytes) of the following fields:
e1.p: 0
e1.y: 8
e2.x: 0
e2.next: 8

(since the fields are stored in a union, the first fields of each structure start at the same offset) 

B. How many total bytes does the structure require?
16 bytes (both structures, e1 and e2, require 16 bytes)

C. 
void proc (union ele *up) {
	up->e2.x = *(up->e2.next->e1.p) - (up->e2.next->e1.y);
}

#void proc (union ele *up)
#up in %rdi
proc:
movq 8(%rdi), %rax 
# %rax = *(up+8) (up->e2.next OR up->e1.y)

movq (%rax), %rdx 
# %rdx = *(up->e2.next)  (since %rax is a pointer type)

movq (%rdx), %rdx 
# %rdx = *( *(up->e2.next->e1.p) ) (since %rdx is a pointer type)

subq 8(%rax), %rdx 
# %rax = *(up + 8) = *(up->e2.next)
# %rax + 8 = *(up->e2.next) + 8 = up->e2.next->e1.y since %rdx is a long number,
# *(up->e2.next->e1.p) - (up->e2.next->e1.y)

movq %rdx, (%rdi) 
# up->e2.x = *(up->e2.next->e1.p) - (up->e2.next->e1.y)

ret 
#return 
